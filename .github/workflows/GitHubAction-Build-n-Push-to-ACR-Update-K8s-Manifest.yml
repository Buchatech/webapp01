name: GitHubActions-Build-n-Push-Container-to-ACR-Update-K8s-Manifest-Deploy-From-ArgoCD

# This workflow uses GitHub Actions and GitOps to build and deploy a simple web app to AKS.
# GitHub Actions creates a new Azure Container Registry if it does not exist 
# GitHub Actions Builds and pushes container to Azure Container Registry
# GitHub Actions logs into your AKS cluster and creates a secret for connecting to ACR used by the image deployment
# GitHub Actions Updates a Kubernetes Manifest Deployment file.
# GitOps Operator Argo CD does a pull and deploys the app to the AKS cluster.

on: [push]

env:
  IMAGE_NAME: webapp01
  # ${{ env.IMAGE_NAME }}
  ACR_NAME: acr6222
  # ${{ env.ACR_NAME }}
  NS_NAME: webapp01-ns
  # ${{ env.NS_NAME }}
  RG_NAME: 51822acrbb45-rg
  # ${{ env.RG_NAME }}
  # NOTE: Has to be an existing resource group.
  REGION_LOCATION: "EAST US"
  # ${{ env.REGION_LOCATION }}

jobs:
  Build-and-Push:
    name: Build and push Docker image to ACR
    runs-on: ubuntu-latest
    steps:
    
    - uses: actions/checkout@main
    
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create ACR
      id: create-acr
      run: |
        az acr create -n ${{ env.ACR_NAME }} -g ${{ env.RG_NAME }} --location "${{ env.REGION_LOCATION }}" --sku Standard --admin-enabled
        echo "::set-output name=acr_username::`az acr credential show -n ${{ env.ACR_NAME }} --query username | xargs`"
        echo "::set-output name=acr_password::`az acr credential show -n ${{ env.ACR_NAME }} --query passwords[0].value | xargs`"
        echo "::add-mask::`az acr credential show -n ${{ env.ACR_NAME }} --query passwords[0].value | xargs`"

    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_NAME }}.azurecr.io
        username: ${{ steps.create-acr.outputs.acr_username }}
        password: ${{ steps.create-acr.outputs.acr_password }}

    - name: Build and push image to ACR
      id: build-image
      run: |
        docker build "$GITHUB_WORKSPACE/" -f  "Dockerfile" -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.run_number }} --label dockerfile-path=Dockerfile
        docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.run_number }}

  Create-ACR-Secret-in-K8s-:
    name: Create a K8s secret for ACR in the AKS cluster
    needs: Build-and-Push
    runs-on: ubuntu-latest
    steps:
    
    - uses: azure/k8s-set-context@v1
      id: k8slogin
      with:
         kubeconfig: ${{ secrets.aks_cicdakstemp5122201_kubeConfig }}
        # kubeconfig: ${{ secrets.AKS_CREDENTIALS_kubeConfig }}

    - name: Create namespace
      run: |
        namespacePresent=`kubectl get namespace | grep ${{ env.NS_NAME }} | wc -l`
        if [ $namespacePresent -eq 0 ]
        then
            echo `kubectl create namespace ${{ env.NS_NAME }}`
        fi
         
    - uses: azure/k8s-create-secret@v1
      with:
        namespace: ${{ env.NS_NAME }}
        container-registry-url: ${{ env.ACR_NAME }}.azurecr.io
        container-registry-username: ${{ env.ACR_NAME }}
        container-registry-password: S+H2sBSmDyRKDJ3zm7PQSgYsby7sTj61 #${{ secrets.acr_acr6222_password }}  
        #container-registry-password: ${{ steps.create-acr.outputs.acr_password }}
        secret-name: ${{ env.ACR_NAME }}-secret

  Update-K8s-Manifests:
    name: Update K8s Deployment Manifest with Image Version
    needs: Build-and-Push
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2

    - name: Update Image Version
      id: imgupd
      uses: mikefarah/yq@master
      with:
        cmd: yq eval '.spec.template.spec.containers[0].image = "${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.run_number }}"' -i manifests/deployment.yml

    - name: Update Image Pull Secret Name
      id: imgpullsecret
      uses: mikefarah/yq@master
      with:
        cmd: yq eval '.spec.template.spec.imagePullSecrets[0].name = "${{ env.ACR_NAME }}-secret"' -i manifests/deployment.yml

    - uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Update image version in K8s Deployment manifests file
